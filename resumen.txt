Proyecto: Sistema de Gestion Academica
=====================================

Objetivo general
----------------
Implementamos el modelo de datos y la logica de negocio para una institucion academica. El sistema cubre altas y bajas de alumnos, inscripciones a cursos, generacion de cuotas y facturacion, intereses por mora, registro de pagos y consulta de informacion mediante funciones y listados dinamicos.

Arquitectura de archivos
------------------------
creacion.SQL
    Script completo de estructura. Crea todas las tablas actualizadas (Estudiantes, Profesores, Materias, Cursos, Cuatrimestre, Matriculacion, Cuota, Factura, CuentaCorriente, InteresMora, ItemFactura) junto con los indices.


02_procedimientos_carga.sql
    6 procedimientos para altas basicas: estudiantes, profesores, materias, cursos, cuatrimestres e interes por mora (con actualizacion si el registro ya existe).

03_procedimientos_gestion.sql
    8 procedimientos principales de negocio: baja/alta de alumnos, matriculacion, inscripcion, carga de notas con reglas de recuperatorio, generacion de cuotas, calculo de intereses y registro de pagos.

04_datos_prueba.sql
    Carga de datos iniciales (profesores, materias, cuatrimestres, estudiantes, cursos, tasas de interes) usando los procedimientos de carga.

05_funciones_escalares.sql
    7 funciones que devuelven valores puntuales (saldo de cuenta corriente, vacantes, nombre completo, promedio, estado de cuota, especialidad del profesor, total adeudado).

06_devolucionTablas.sql
    10 funciones que retornan JSON con listados (cursos del estudiante, cuotas impagas, profesores por cuatrimestre, etc.). Se usan SELECT + JSON_TABLE para expandir cuando haga falta.

07_cursores_listados.sql
    10 procedimientos con cursores que escriben resultados en tablas temporales y devuelven listados (notas finales, historial de pagos, materias con cursos, cuotas vencidas, etc.).

08_sql_dinamico.sql
    10 procedimientos con SQL dinamico controlado (filtros parametrizables por campo, agrupaciones flexibles, ordenamientos dinamicos, seleccion de columnas).

09_triggers.sql
    10 triggers de reglas de negocio: actualizan cuotas al registrar pagos, recalculan nota final con recuperatorio, impiden doble inscripcion, generan movimientos al facturar, aplican intereses por mora, etc.

10_transacciones.sql
    10 procedimientos transaccionales (START TRANSACTION/COMMIT/ROLLBACK) que combinan la logica anterior: matricular y facturar, inscribir con validacion de cupos, registrar pagos, generar cuotas masivas, baja condicionada, registrar notas, emitir facturas agrupadas, reinscribir, etc.


demo_guion.sql
    Secuencia resumida para la defensa. Contiene los CALL y SELECT principales listos para copiar y pegar en la presentacion.

README.md
    Guia del proyecto (orden de ejecucion, estado del desarrollo, modelo de datos, etc.).

requisitos.txt
    Enunciado completo provisto por el docente.

Logica principal
----------------
1. Esquema financiero asociado a la cuenta corriente de cada estudiante (Factura, ItemFactura, Cuota, CuentaCorriente) con triggers que sincronizan estados.
2. Procedimientos encapsulan reglas: no se matricula dos veces en el mismo anio, no se inscribe si esta dado de baja o si hay cupos completos, recuperatorio solo cuando corresponde.
3. Operaciones sensibles van en transacciones para garantizar consistencia (matricular + generar factura + asiento, pagar + actualizar factura y cuotas, etc.).
4. Listados disponibles como procedimientos (cursores) y como funciones JSON para integraciones.

Tips para la demostracion
-------------------------
- Ejecutar primero creacion.SQL y luego los scripts 02 a 10.
- Cargar los datos base con 04_datos_prueba.sql.
- Usar demo_guion.sql como guion de comandos para mostrar cada flujo y sus resultados (matricula, inscripcion, generacion de cuotas, pagos, baja/alta, notas, funciones).
- Ante error de saldo distinto de cero, mostrar las facturas pendientes con SELECT y pagarlas con SP_TX_RegistrarPagoCompleto antes de repetir la baja.

